@use './color' as color;
@use './font' as font;
@use "./variables";
@use './functions';

// Centre a block element

@mixin center--auto {
  margin: { 
      
      left: auto;
      right: auto;
  }
}

// Hide from browsers
@mixin hidden {
	display: none;
	
}


// usege: can be used for square box as well as rectangular box
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}  

@mixin border($color, $width, $type, $border-rd) {
    border: $width $type $color;
    border-radius: $border-rd;
}
  
// @mixin borderRadius($borderRadius) {
//   border-radius: $borderRadius;
// }
@mixin margin($marginTop, $marginRight , $marginBottom , $marginLeft ) {
  margin-top: $marginTop;
  margin-right: $marginRight;
  margin-bottom: $marginBottom;
  margin-left: $marginLeft;
}
@mixin padding($paddingTop, $paddingRight , $paddingBottom , $paddingLeft ) {
  padding-top: $paddingTop;
  padding-right: $paddingRight;
  padding-bottom: $paddingBottom;
  padding-left: $paddingleft;
}
@mixin  box-shadow ($x-offset, $y-offset, $blur) {
  box-shadow : $x-offset $y-offset $blur color.$box-shadow;
}

// border radius

@mixin border-radius($radius: 0 0 0 0) {
  border-radius: $radius
}

// flex-box

@mixin flexbox ($direction, $wrap, $align-content, $justify-content, $align-items){
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  align-content: $align-content;
  justify-content: $justify-content;
  align-items: $align-items;
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

// shorthand of flex-gow, flex-shrink, flex-basis


@mixin flex($fg: 1, $fs: null, $fb: null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}


// Placeholder

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

// Hide from browsers
@mixin hidden {
	display: none;
	
}

// font style
@mixin font($font-size, $font-weight, $line-height: normal) {
  font-size: $font-size * 1px;
  font-weight:$font-weight;
  // font-size: $font-size * 0.1rem;
  // using rem values and 62.5% font-size so 1rem = 10px

  @if $line-height==normal {
    line-height: normal;
  } @else {
    line-height: $line-height / $font-size;
  }

}

// pseudo elements
@mixin pseudo(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

// box size calc
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// use
// .box { 
//   @include calc(width, “100% - 50px”);
// }



// for header styling

//only provide line-height to the mixin
@mixin headline($line-height) {
  font-family:  font.$fontFamily;
  font-weight: font.$largeFontWeight;
  line-height: $line-height;
  font-size: font.$largeFontSize;

  
  
}

// positioning

@mixin position($position, $box-edge-values) {
  position: $position;
  $box-edge-values: functions.unpack-shorthand($box-edge-values);
  top:    nth($box-edge-values, 1);
  right:  nth($box-edge-values, 2);
  bottom: nth($box-edge-values, 3);
  left:   nth($box-edge-values, 4);
}

// usage
// .c-stickyHeader {
//   @include position(fixed, 0 0 auto 0);
// }

// .c-modal {
//   @include position(absolute, 20%); // 20% distance to each side
// }




// Truncate Text
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow;
}


// box-sizing
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}


/* Clearfix */

@mixin clearfix() {
  &:before,
  &:after {
      content: "";
      display: table;
  }
  &:after {
      clear: both;
  }
}

// usage
// .element {
//   @include clearfix();
// }
